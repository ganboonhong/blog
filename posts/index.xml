<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Clarity</title><link>https://ganboonhong.github.io/posts/</link><description>Recent content in Posts on Clarity</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Sun, 25 Sep 2022 14:02:55 +0800</lastBuildDate><atom:link href="https://ganboonhong.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Go Interface With Lego</title><link>https://ganboonhong.github.io/posts/golang/understanding-interface-with-lego/</link><pubDate>Sun, 25 Sep 2022 14:02:55 +0800</pubDate><guid>https://ganboonhong.github.io/posts/golang/understanding-interface-with-lego/</guid><description>
The purpose of interface is to enable unrelated objects to communicate with each other. In order to communicate, both sides must follow a protocol. Like Lego, in order to put 2 pieces of brick together, you need to make sure they can &amp;quot;communicate&amp;quot; with each other. The bottom one's studs will fit the one on top's tubes. The designers (programmers) define the interfaces to let two bricks (objects) to communicate.</description></item><item><title>List Modified Files by Filtering Keyword in git Commit Messages</title><link>https://ganboonhong.github.io/posts/git/git-list-modified-files-in-pr/</link><pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate><guid>https://ganboonhong.github.io/posts/git/git-list-modified-files-in-pr/</guid><description>
I was pretty suprised that when I was looking for a git command that can list out all the modified files in git commits that contain certain string. Then I found that there's no such a command out of the box. So I start searching for different commands and put those pieces together.</description></item><item><title>Speed Up SSH Connection</title><link>https://ganboonhong.github.io/posts/ssh/speed-up-ssh-connection/</link><pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate><guid>https://ganboonhong.github.io/posts/ssh/speed-up-ssh-connection/</guid><description>
When you need to work on remote environment, chances are high that you need to establish an SSH connection. Slow connection speed can be annoying especially you need to do it very often.</description></item><item><title>Why SSH PasswordAuthentication option doesn't work</title><link>https://ganboonhong.github.io/posts/ssh/ssh-password-authentication/</link><pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate><guid>https://ganboonhong.github.io/posts/ssh/ssh-password-authentication/</guid><description>
After reading the SSH manual, I enabled the PasswordAuthentication in the /etc/ssh/ssh_config on my server.
I tried to establish a SSH connection to my server with the command ssh username@hosturl.com.
I got this error message: username@hosturl.com: Permission denied (publickey).
Apparently, my ssh client was trying to use public key to establish the connection instead of prompting for password. I couldn't find out why the option doesn't work as expected until I tried to list the /etc/ssh/ directory again.</description></item><item><title>Utilize git-worktree When Handling Urgent Ticket</title><link>https://ganboonhong.github.io/posts/git/git-worktree/</link><pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate><guid>https://ganboonhong.github.io/posts/git/git-worktree/</guid><description>
Have you ever been in a situation that, you're halfway to complete a feature and interrupted by an urgent ticket? You've modified tons of files and you need to put the modified files somewhere so that you can start working on the urgent ticket.</description></item><item><title>GitHub PR mergeability</title><link>https://ganboonhong.github.io/posts/git/github-mergability/</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>https://ganboonhong.github.io/posts/git/github-mergability/</guid><description>
Prevent PR that falied tests from accidentally merging into main branch by creating a Branch Protection Rule</description></item><item><title>SQLite Temporary Files</title><link>https://ganboonhong.github.io/posts/sqlite/temporary-files/</link><pubDate>Sun, 07 Jan 2018 21:36:22 +0800</pubDate><guid>https://ganboonhong.github.io/posts/sqlite/temporary-files/</guid><description>
I guess the name SQLite means it's a (relatively) light weight database.
All the data will be stored in just one database file. In this case, the backup task would be pretty easy. Basically just copy and paste, then end of story.
Why we don't see those temporary files normally? Although it has only one file in the end of process, it doesn't mean there's no other file during the process.</description></item><item><title>How Does Commit and Rollback Work</title><link>https://ganboonhong.github.io/posts/database/how-does-commit-and-rollback-work/</link><pubDate>Sun, 07 Jan 2018 14:02:55 +0800</pubDate><guid>https://ganboonhong.github.io/posts/database/how-does-commit-and-rollback-work/</guid><description>
The traditional rollback journal works by writing a copy of the original unchanged database content into a separate rollback journal file and then writing changes directly into the database file. In the event of a crash or rollback, ...</description></item></channel></rss>