[{"body":"","link":"https://ganboonhong.github.io/refs/","section":"","tags":null,"title":""},{"body":"","link":"https://ganboonhong.github.io/refs/tags/golang/","section":"tags","tags":null,"title":"golang"},{"body":"","link":"https://ganboonhong.github.io/refs/tags/interface/","section":"tags","tags":null,"title":"interface"},{"body":"","link":"https://ganboonhong.github.io/refs/posts/","section":"posts","tags":null,"title":"Posts"},{"body":"","link":"https://ganboonhong.github.io/refs/tags/","section":"tags","tags":null,"title":"Tags"},{"body":" The purpose of interface is to enable unrelated objects to communicate with each other. In order to communicate, both sides must follow a protocol. Like Lego, in order to put 2 pieces of brick together, you need to make sure they can \u0026quot;communicate\u0026quot; with each other. The bottom one's studs will fit the one on top's tubes. The designers (programmers) define the interfaces to let two bricks (objects) to communicate.\nInterface in Go works slightly different from other languages. The way your type implements the interface is implicit. As long as your type implements the same methods that declared in the interface. For example, let's define a Washer interface and it has 2 methods: GetCleaner() and GetWaterVolume().\n1package main 2 3import ( 4\t\u0026#34;fmt\u0026#34; 5) 6 7type ClothWasher struct { 8\ttarget string 9} 10 11type DishWasher struct { 12\ttarget string 13} 14 15type Washer interface { 16\tGetCleaner() string 17\tGetWaterVolume() int 18} 19 20func StartWashing(w Washer) string { 21\tcleaner := w.GetCleaner() 22\tprogress := fmt.Sprintf(\u0026#34;start washing with %s\u0026#34;, cleaner) 23 24\treturn progress 25} 26 27func StopWashing(w Washer) string { 28\tvol := w.GetWaterVolume() 29\tprogress := fmt.Sprintf(\u0026#34;rinsing with %d liters of water\u0026#34;, vol) 30 31\treturn progress 32} 33 34func (d DishWasher) GetCleaner() string { 35\treturn \u0026#34;dishwashing liquid\u0026#34; 36} 37 38func (d DishWasher) GetWaterVolume() int { 39\treturn 2 40} 41 42func (c ClothWasher) GetCleaner() string { 43\treturn \u0026#34;detergent\u0026#34; 44} 45 46func (c ClothWasher) GetWaterVolume() int { 47\treturn 10 48} 49 50func main() { 51\tc := ClothWasher{} 52\td := DishWasher{} 53 54\tfmt.Println(StartWashing(c)) // start washing with detergent 55\tfmt.Println(StopWashing(c)) // rinsing with 10 liters of water 56\tfmt.Println(StartWashing(d)) // start washing with dishwashing liquid 57\tfmt.Println(StopWashing(d)) // rinsing with 2 liters of water 58} Now both StartWashing and StopWashing accept Washer interface as parameter. Which means as long as a type has both GetCleaner() and GetWater() methods, this type has already implicitly implemented Washer interface and able to use StartWashing and StopWashing methods directly.\nIn Go, You may also take the advandage of empty interface in your function paramter. An empty interface as paramter means you can pass in any type of data. But make sure you use it appropriately. For example fmt package's Println function takes an empty interface as parameter, which means it can print out any data type. By receiving empty interface in incorrect circumstances might also cause unexpected bug.\n","link":"https://ganboonhong.github.io/refs/posts/golang/understanding-interface-with-lego/","section":"posts","tags":["golang","interface"],"title":"Understanding Go Interface With Lego"},{"body":"","link":"https://ganboonhong.github.io/refs/tags/git/","section":"tags","tags":null,"title":"git"},{"body":" Searching PRs by keyword Problem As you can see in the above screenshot, my last commit in this PR deliberately fails the CI flow in Drone and we can see the \u0026quot;All checks have failed\u0026quot; warning. But this PR is still mergable (even by a non-admin user).\nProblem I was pretty suprised when I was looking for a git command that can list out all the modified files in git commits that contain certain string in commit messages. Then I found that there's no such a command out of the box. So I start searching for different commands and put those pieces together.\nI have the following restrictions on company's working environment:\nonly git command is available gh command is not available An alternative would be searching the keyword using GUI then open each commit hashes to get the modified files manually. If you've only a few commits, this approach could work pretty well. But it's a time consuming task if you got a lot commits to deal with. So doing it in CLI way would be more efficient.\nSolution 1git log --pretty=format:\u0026#34;%h %ae %ar %s\u0026#34; | \\ 2grep \u0026#39;ticket-1054\u0026#39; | \\ 3grep \u0026#39;user@example.com\u0026#39; | \\ 4grep -v \u0026#34;Merge pull request\u0026#34; 5 653fd98e9 user@example.com 26 hours ago fix: ticket-1054 gate entries feature (case 2904) 7ff96c35f user@example.com 28 hours ago fix: ticket-1054 gate entries feature 8b80f5a95 user@example.com 2 days ago fix: ticket-1054 gate entries feature (case 2902, 2903) 9fa82d145 user@example.com 9 days ago fix: ticket-1054 gate entries feature (case 2891) 105e1aadb0 user@example.com 9 days ago fix: ticket-1054 gate entries feature (translation) 11400afa9a user@example.com 2 weeks ago fix: ticket-1054 gate entries feature (case 2891) 12d3714b22 user@example.com 2 weeks ago fix: ticket-1054 gate entries feature (case 2891) 136e3958e9 user@example.com 2 weeks ago fix: ticket-1054 gate entries feature (case 2889, 2890) 1412ea69f9 user@example.com 2 weeks ago fix: ticket-1054 gate entries feature (case 2888) 15f8ce5a2c user@example.com 2 weeks ago fix: ticket-1054 gate entries feature (case 2887) 1697c0d8c5 user@example.com 2 weeks ago fix: ticket-1054 gate entries feature (case 2884, 2885, 2886, 2887) 17f8f40bcf user@example.com 2 weeks ago fix: ticket-1054 gate entries feature (case 2884, 2885, 2886, 2887) 183531096f user@example.com 3 weeks ago feat: ticket-1054 gate entries feature (translation) 19cab6e773 user@example.com 6 weeks ago fix: ticket-1054 gate entries feature (translation) 20a4762b29 user@example.com 6 weeks ago fix: ticket-1054 gate entries feature (translation) 21f7473d05 user@example.com 6 weeks ago fix: ticket-1054 gate entries feature (case 2816) 2218339de1 user@example.com 6 weeks ago fix: ticket-1054 gate entries feature (case 2816) 234ad4801c user@example.com 7 weeks ago fix: ticket-1054 gate entries feature (case 2816) 242fee90ac user@example.com 7 weeks ago fix: ticket-1054 gate entries feature (case 2815, 2816) 25e8f11317 user@example.com 7 weeks ago fix: ticket-1054 gate entries feature (case 2812, 2814) 2681cab87c user@example.com 10 weeks ago feat: ticket-1054 gate entries feature Command Explanation git log I use git log command to extract the commit messages Docs git log --pretty %h Abbreviated commit hash Docs git log --pretty %ae Author email Docs git log --pretty %ar Author date, relative Docs git log --pretty %s Subject(first line of the commit message) Docs grep 'ticket-1054' ticket-* is branch name in commit message, which is a my custom keyword in this case. It can be any keyword depends on your needs. grep 'user@example.com' filter by email address `bbgrep -v 'Merge pull request' exclude merge pull request commits (commit of a pull request merge won't show modified files in git diff-tree command later) Then we use git diff-tree --no-commit-id --name-only -r \u0026lt;commit-hash\u0026gt; to loop through all commits to list out the modified files.\n1git diff-tree --no-commit-id --name-only -r 53fd98e9 2 3api/queries_pr.go 4api/query_builder.go 5pkg/cmd/pr/checks/aggregate.go 6pkg/cmd/pr/checks/checks.go 7pkg/cmd/pr/checks/checks_test.go 8pkg/cmd/pr/checks/fixtures/allPassing.json 9pkg/cmd/pr/checks/fixtures/onlyRequired.json 10pkg/cmd/pr/checks/fixtures/someFailing.json 11pkg/cmd/pr/checks/fixtures/somePending.json 12pkg/cmd/pr/checks/fixtures/someSkipping.json 13pkg/cmd/pr/checks/fixtures/withStatuses.json Command Explanation git diff-tree Show modified files Docs git diff-tree --no-commit-id Hide commit ID output Docs git diff-tree --name-only Show only names of changed files. Docs git diff-tree -r recurse into sub-trees (show full path instead of directory only) Docs ","link":"https://ganboonhong.github.io/refs/posts/git/git-list-modified-files-in-pr/","section":"posts","tags":["git"],"title":"List Modified Files by Filtering Keyword in git Commit Messages"},{"body":"","link":"https://ganboonhong.github.io/refs/tags/config/","section":"tags","tags":null,"title":"config"},{"body":"Problem\nWhen you need to work on remote environment, chances are high that you need to establish an SSH connection. Slow connection speed can be annoying especially you need to do it very often.\nSolution\nThere are 2 options in ssh_config manual that solve the above problem:\nWith the above configurations, the subsequent SSH connections have less overhead. (Your first connection must stay connected for others to reuse the connection)\nHere is the explaination of above options from ssh_config manual:\nControlMaster Enables the sharing of multiple sessions over a single network connection. When set to yes, ssh(1) will listen for connections on a control socket specified using the ControlPath argument. Additional sessions can connect to socket using the same ControlPath with ControlMaster set to no (the default). These sessions will try to reuse the master instance's network connection rather than initiating new ones, but will fall back to connecting normally the control socket does not exist, or is not listening.\nSetting this to ask will cause ssh(1) to listen for control connections, but require confirmation using ssh-askpass(1). If the ControlPath cannot be opened, ssh(1) will continue without connecting to a master instance.\nX11 and ssh-agent(1) forwarding is supported over these multiplexed connections, however the display and agent forwarded will be the one belonging to the master connection i.e. it is not possible to forward multiple displays or agents.\nTwo additional options allow for opportunistic multiplexing: try to use a master connection but fall back to creating a new one if one does not already exist. These options are: auto and autoask. The latter requires confirmation like the ask option.\nControlPath Specify the path to the control socket used for connection sharing as described in the ControlMaster section above or the string none to disable connection sharing. Arguments to ControlPath may use the tilde syntax to refer to a user's home directory or the tokens described in the TOKENS section. It is recommended that any ControlPath used for opportunistic connection sharing include at least %h, %p, and %r (or alternatively %C) and be placed in a directory that is not writable by other users. This ensures that shared connections are uniquely identified.\n","link":"https://ganboonhong.github.io/refs/posts/ssh/speed-up-ssh-connection/","section":"posts","tags":["config","ssh"],"title":"Speed Up SSH Connection"},{"body":"","link":"https://ganboonhong.github.io/refs/tags/ssh/","section":"tags","tags":null,"title":"ssh"},{"body":"","link":"https://ganboonhong.github.io/refs/tags/auth/","section":"tags","tags":null,"title":"auth"},{"body":" After reading the SSH manual, I enabled the PasswordAuthentication in the /etc/ssh/ssh_config on my server.\nI tried to establish a SSH connection to my server with the command ssh username@hosturl.com.\nI got this error message: username@hosturl.com: Permission denied (publickey).\nApparently, my ssh client was trying to use public key to establish the connection instead of prompting for password. I couldn't find out why the option doesn't work as expected until I tried to list the /etc/ssh/ directory again. There's another file named /etc/ssh/sshd_config. One question immediately appear in my mind: what's the difference between ssh_config and sshd_config?\nThis blog provides a good explanation. In short:\nssh_config is configuration for SSH client on that server sshd_config is configuration for incoming connection request So, I updated the connection on the correct configuration file and it worked as expected. I successfully established a connection via password and username from my laptop.\n","link":"https://ganboonhong.github.io/refs/posts/ssh/ssh-password-authentication/","section":"posts","tags":["auth","ssh"],"title":"Why SSH PasswordAuthentication option doesn't work"},{"body":" Modified files Problem Have you ever been in a situation that, you're halfway to complete a feature and interrupted by an urgent ticket? You've modified tons of files and you need to put the modified files somewhere so that you can start working on the urgent ticket.\nOf course, one of the solutions to handle this situation might be using git stash command to stash your changes. As titled, I'm not going to discuss this approach here. Instead, I'm going to use git worktree command (official doc) to tackle this issue.\nSolution 1git worktree add \u0026lt;new_path\u0026gt; -b \u0026lt;new_branch\u0026gt; Let's create a new worktree by using git worktree add \u0026lt;new_path\u0026gt; -b \u0026lt;new_branch\u0026gt; Create a new worktree by using `git worktree add` As you can see, new worktree is located in new directory with new git branch. You might think that you could also achieve the same goal by creating a new directory and cloning the repository again.\nAdmittedly, the cloning approach works too, but the disk usage of directories are different. (Of course, there are differences between two approaches other than disk usage.)\nDisk Usage New worktree only took around 19% of the original one. For project with larger size, the difference in size would be more significant. Also, it took more time to clone a large repository if you prefer the cloning approach.\nDisk usage of the linked worktree is significantly less than the main worktree Running Time Consuming Test Cases Another situation is that If you must run test cases on local that take quite a long time, you may apply the above strategy to avoid hanging there do nothing. Hope the above trick may help you to increase your productivity.\nHappy coding!\n","link":"https://ganboonhong.github.io/refs/posts/git/git-worktree/","section":"posts","tags":["git"],"title":"Utilize git-worktree When Handling Urgent Ticket"},{"body":" No rule protection on pull request, PR that failed in CI is still mergable Problem As you can see in the above screenshot, my last commit in this PR deliberately fails the CI flow in Drone and we can see the \u0026quot;All checks have failed\u0026quot; warning. But this PR is still mergable (even by a non-admin user).\nMost of the time, we want to block pull requests that don't pass status checks from merging into master branch. GitHub provides a great feature called Branch protection rule to achieve this goal (doc).\nSolution Create a Branch Protection Rule This function is located in repository Settings \u0026gt; Code and automation \u0026gt; Branches \u0026gt; Add rule\nLet's create the rule as below: Notice that the Branch name pattern field, the value shouldn't contain any white space. Otherwise, you'll get a invalid rule error message.\nNow we have a rule to block PR with failing status.\nAdministrator still can merge PR even the checks have failed By checking the Include administrators option, the restrictions will be applied to administrators too.\n","link":"https://ganboonhong.github.io/refs/posts/git/github-mergability/","section":"posts","tags":["git"],"title":"GitHub PR mergeability"},{"body":"","link":"https://ganboonhong.github.io/refs/tags/sqlite/","section":"tags","tags":null,"title":"sqlite"},{"body":" I guess the name SQLite means it's a (relatively) light weight database.\nAll the data will be stored in just one database file. In this case, the backup task would be pretty easy. Basically just copy and paste, then end of story.\nWhy we don't see those temporary files normally? Although it has only one file in the end of process, it doesn't mean there's no other file during the process. Those files are created during the process and removed at the end of process.\nNormally, you won't see the *-journal file when you try to list the directory. But if you try to concurrent read and write request (I use JMeter to perfom concurrent request), you'll find that SQLite does generate temporary file to handle the process. When I stop sending the request, the ts.db-journal will disappear.\nWhat happened under the hood? Normally, the journal file will be generated when the transaction begins and be removed when the transaction is commited or rollbacked.\nThe journal file won't be removed in the following scnerios: When SQLite is crashed or power loss happened, the journal file won't be removed. The next time you open the database file (with command: sqlite3 ts.db), SQLite will notice that there is abandoned journal file (it's caled Hot Journal) exists in current directory, SQLite will try to restore the database to its state prior to the start of the incomplete transaction.\n","link":"https://ganboonhong.github.io/refs/posts/sqlite/temporary-files/","section":"posts","tags":["sqlite"],"title":"SQLite Temporary Files"},{"body":"","link":"https://ganboonhong.github.io/refs/tags/database/","section":"tags","tags":null,"title":"database"},{"body":" The traditional rollback journal works by writing a copy of the original unchanged database content into a separate rollback journal file and then writing changes directly into the database file.\nIn the event of a crash or rollback, the original content contained in the rollback journal is played back into the database file to revert the database file to its original state. The commit occurs when the rollback journal is deleted.\nExample:\nLet's say the original database file is named name.db.\nWhen transaction begins, now we have another file created, let’s say name.db-journal, basically this is just a backup file of original one.\nFrom now on, whatever changes will be done within name.db. After the changes, there will be 2 possible scenerios:\nCase 1: Commit When user commits (which mean we want to keep the changes)\nWe discard the \u0026quot;backup\u0026quot; (name.db-journal), now the only file left is name.db.\nCase 2: Rollback When user rollbacks (which mean we want to discard the changes)\nWe put the content in the name.db-journal back into name.db, then remove name.db-journal. So the only file left is name.db.\n","link":"https://ganboonhong.github.io/refs/posts/database/how-does-commit-and-rollback-work/","section":"posts","tags":["database"],"title":"How Does Commit and Rollback Work"},{"body":"","link":"https://ganboonhong.github.io/refs/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://ganboonhong.github.io/refs/series/","section":"series","tags":null,"title":"Series"}]